"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""


from io import BytesIO
import struct

class skeleton_lcm(object):

    __slots__ = ["id", "confidence", "joint_positions", "joint_orientations"]

    __typenames__ = ["int32_t", "int32_t", "float", "float"]

    __dimensions__ = [None, [32], [32, 3], [32, 4]]

    def __init__(self):
        self.id = 0
        """ LCM Type: int32_t """
        self.confidence = [ 0 for dim0 in range(32) ]
        """ LCM Type: int32_t[32] """
        self.joint_positions = [ [ 0.0 for dim1 in range(3) ] for dim0 in range(32) ]
        """ LCM Type: float[32][3] """
        self.joint_orientations = [ [ 0.0 for dim1 in range(4) ] for dim0 in range(32) ]
        """ LCM Type: float[32][4] """

    def encode(self):
        buf = BytesIO()
        buf.write(skeleton_lcm._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">i", self.id))
        buf.write(struct.pack('>32i', *self.confidence[:32]))
        for i0 in range(32):
            buf.write(struct.pack('>3f', *self.joint_positions[i0][:3]))
        for i0 in range(32):
            buf.write(struct.pack('>4f', *self.joint_orientations[i0][:4]))

    @staticmethod
    def decode(data: bytes):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != skeleton_lcm._get_packed_fingerprint():
            raise ValueError("Decode error")
        return skeleton_lcm._decode_one(buf)

    @staticmethod
    def _decode_one(buf):
        self = skeleton_lcm()
        self.id = struct.unpack(">i", buf.read(4))[0]
        self.confidence = struct.unpack('>32i', buf.read(128))
        self.joint_positions = []
        for i0 in range(32):
            self.joint_positions.append(struct.unpack('>3f', buf.read(12)))
        self.joint_orientations = []
        for i0 in range(32):
            self.joint_orientations.append(struct.unpack('>4f', buf.read(16)))
        return self

    @staticmethod
    def _get_hash_recursive(parents):
        if skeleton_lcm in parents: return 0
        tmphash = (0x38f7dafe9b9c864d) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _packed_fingerprint = None

    @staticmethod
    def _get_packed_fingerprint():
        if skeleton_lcm._packed_fingerprint is None:
            skeleton_lcm._packed_fingerprint = struct.pack(">Q", skeleton_lcm._get_hash_recursive([]))
        return skeleton_lcm._packed_fingerprint

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", skeleton_lcm._get_packed_fingerprint())[0]

